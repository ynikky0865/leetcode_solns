class Solution:
    def minimumDeleteSum(self, s1: str, s2: str) -> int:
        #1 Len word1(n), word2(m)
        n=len(s1)
        m=len(s2)
        #2 create 2D dp of size (m+1)*(n+1)
        dp=[[0]*(n+1) for _ in range(m+1)]
        #3 Update row0==col index
        for j in range(1,n+1):
            dp[0][j]=dp[0][j-1]+ord(s1[j-1])
        #4 Update col0==row index
        for i in range(1,m+1):
            dp[i][0]=dp[i-1][0]+ord(s2[i-1])
        #5 Update dp(i,j) from (1,1) to (m,n)
           #w1{ch} == w2{ch} => dp(i,j) = dia
           #else dp(i,j)=min(left,top)+1
        for i in range(1,m+1):
            for j in range(1,n+1):
                if s1[j-1]==s2[i-1]:
                    dp[i][j]=dp[i-1][j-1]
                else:
                    top=dp[i-1][j]+ord(s2[i-1])
                    left=dp[i][j-1]+ord(s1[j-1])
                    dp[i][j]=min(left,top)
        return dp[-1][-1]

        #6 return dp[-1][-1] 
