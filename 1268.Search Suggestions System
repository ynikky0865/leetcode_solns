class Node:
    def __init__(self):
        self.children = {}
        self.word_end = False
class Trie:
    def __init__(self):
        self.root = Node()
    def insert(self, word: str) -> None:
        current_node = self.root 
        for ch in word:
            if ch not in current_node.children:
                current_node.children[ch] = Node()
            current_node = current_node.children[ch]
        current_node.word_end = True
    def search(self, word: str) -> bool:
        current_node = self.root
        for ch in word:
            if ch not in current_node.children:
                return False
            current_node = current_node.children[ch]
        return current_node.word_end
    def startsWith(self, prefix: str) -> bool:
        current_node = self.root
        for ch in prefix:
            if ch not in current_node.children:
                return False
            current_node = current_node.children[ch]
        return True
    def prefix_list(self, prefix):
        def dfs(current_node, path):
            if current_node.word_end:
                words.append(''.join(path))
            for ch , children_node in current_node.children.items():
                dfs(children_node, path + [ch])
        words = []
        current_node = self.root
        for ch in prefix:
            if ch not in current_node.children:
                return []
            current_node = current_node.children[ch]
        dfs(current_node,list(prefix))
        return words
class Solution:
    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        trie = Trie()
        products.sort()
        for word in products:
            trie.insert(word)
        res = []
        for i in range(len(searchWord)):
            words = trie.prefix_list(searchWord[:i+1])
            if len(words) > 3:
                res.append(words[:3])
            else:
                res.append(words)       
        return res
