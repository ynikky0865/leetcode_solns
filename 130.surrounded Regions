class Solution:
    def solve(self, board: List[List[str]]) -> None:
        nr = len(board)
        nc = len(board[0])

        def dfs(board, ri, ci):
            if ri < 0 or ci < 0 or ri > nr-1 or ci > nc-1 or (board[ri][ci] != 'O'):
                return
            board[ri][ci] = 'v'
            dfs(board, ri, ci-1)
            dfs(board, ri, ci+1)
            dfs(board, ri-1, ci)
            dfs(board, ri+1, ci)
        for i in range(nc):
            if board[0][i] == 'O':
                dfs(board, 0, i)
            if board[nr-1][i] == 'O':
                dfs(board, nr-1, i)
        for i in range(nr):
            if board[i][0] == 'O':
                dfs(board, i, 0)
            if board[i][nc-1] == 'O':
                dfs(board, i, nc-1)

        for i in range(nr):
            for j in range(nc):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
                elif board[i][j] == 'v':
                    board[i][j] = 'O'
